def caching_fibonacci():
    # Крок 1: Створюємо порожній словник (наш "блокнот" для кешу)
    # Цей "блокнот" буде жити всередині функції, яку ми повертаємо.
    cache = {}

    def fibonacci(n):
       # Крок 2: Базові випадки, з яких починається ряд
        if n <= 0:
            return 0
        if n == 1:
            return 1
        
        # Крок 3: Перевіряємо, чи є відповідь у нашому "блокноті" (кеші)
        if n in cache:
            return cache[n]  # Якщо є, миттєво повертаємо її

        # Крок 4: Якщо в блокноті немає, ми рахуємо відповідь
        # і обов'язково записуємо її в блокнот перед тим, як повернути.
        cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
        return cache[n]

    # Крок 5: Головна функція повертає внутрішню функцію
    # Вона повертає саму функцію fibonacci, а не її результат!
    return fibonacci

# 1. Отримуємо "розумну" функцію з власним "блокнотом"
fib = caching_fibonacci()

# 2. Викликаємо її
print(f"fib(10) = {fib(10)}")  # Виведе 55
print(f"fib(15) = {fib(15)}")  # Виведе 610

# Якщо ми викличемо fib(10) ще раз, вона не буде рахувати,
# а просто візьме готове число 55 зі свого "блокнота".
print(f"fib(10) ще раз = {fib(10)}") # Миттєво виведе 55
